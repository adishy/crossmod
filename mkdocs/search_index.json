{
    "docs": [
        {
            "location": "/",
            "text": "Code base for \nCrossmod: A Cross-Community Learning-based System to Assist Reddit Moderators\n\n\nACM Reference Format:\n\n\nEshwar Chandrasekharan, Chaitrali Gandhi, Matthew Wortley Mustelier, and Eric Gilbert. 2019. Crossmod: A\nCross-Community Learning-based System to Assist Reddit Moderators. Proc. ACM Hum.-Comput. Interact., CSCW.\n\n\nCode directory:\n\n\ncode/\n - contains the codebase for the system:\n  * \nconfig.py\n: configuration file that allows mods to control the system using \nIFTTT rules\n\n  * \ngetPrediction.py\n: modules to query back-end models in order to score incoming comments\n  * \ncrossmod.py\n: system code that creates a bot moderator for the test subreddit, taking moderations actions based on the configuration file.\n\n\ndata/\n - contains the list of subreddits and norm violations that comprise the system's AI back-end.\n\n\nContact authors to obtain the ensemble of classifiers for Crossmod's back-end.\n\n\nInstallation instructions:\n\n\n\n\nCrossmod depends on flask, SQLAlchemy, pandas, praw (python reddit api wrapper) and the google api python client \n  \n(Preferably use a virtual environment)\n\n\n\n\npip3 install flask\npip3 install sqlalchemy\npip3 install pandas     \npip3 install praw  \npip3 install google-api-python-client\npip3 install fasttext\npip3 install tenacity",
            "title": "Home"
        },
        {
            "location": "/#code-base-for-crossmod-a-cross-community-learning-based-system-to-assist-reddit-moderators",
            "text": "",
            "title": "Code base for Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators"
        },
        {
            "location": "/#acm-reference-format",
            "text": "Eshwar Chandrasekharan, Chaitrali Gandhi, Matthew Wortley Mustelier, and Eric Gilbert. 2019. Crossmod: A\nCross-Community Learning-based System to Assist Reddit Moderators. Proc. ACM Hum.-Comput. Interact., CSCW.",
            "title": "ACM Reference Format:"
        },
        {
            "location": "/#code-directory",
            "text": "code/  - contains the codebase for the system:\n  *  config.py : configuration file that allows mods to control the system using  IFTTT rules \n  *  getPrediction.py : modules to query back-end models in order to score incoming comments\n  *  crossmod.py : system code that creates a bot moderator for the test subreddit, taking moderations actions based on the configuration file.  data/  - contains the list of subreddits and norm violations that comprise the system's AI back-end.  Contact authors to obtain the ensemble of classifiers for Crossmod's back-end.",
            "title": "Code directory:"
        },
        {
            "location": "/#installation-instructions",
            "text": "Crossmod depends on flask, SQLAlchemy, pandas, praw (python reddit api wrapper) and the google api python client \n   (Preferably use a virtual environment)   pip3 install flask\npip3 install sqlalchemy\npip3 install pandas     \npip3 install praw  \npip3 install google-api-python-client\npip3 install fasttext\npip3 install tenacity",
            "title": "Installation instructions:"
        },
        {
            "location": "/api/",
            "text": "Quick Start\n\n\n### Running a local instance\n* Clone Crossmoderator repository\n    * \nhttps://github.com/ceshwar/crossmod\n\n* Install dependencies\n\n\n./bin/crossmod_flask_run.sh\n\n\n\n\nFlask (Outdated)\n\n\n$ export FLASK_APP=api.py\n$ flask run --host=0.0.0.0 -p 6000\n\n\n\n\nGunicorn (Outdated)\n\n\n$ gunicorn3 --bind 0.0.0.0:6000 wsgi\n\n\n\n\nAPI Request Format\n\n\nAn API request takes the following format:\n\n\nhttp://crossmod.ml/api/v1/get-prediction-scores\n\n\n\n\nThe API call request is a JSON object with the following fields:\n\n\n{\n    \"comments\": [ comment1, comment2, ... ],\n    \"subreddit_list\": [ classifier1, classifier2, ... ],\n    \"macro_norm_list\": [ norm1, norm2, ... ],\n    \"key\": KEY\n}\n\n\n\n\n\ncomments:\n array of comment strings to be evaluated\n\n\nsubreddit_list [OPTIONAL]:\n list of subreddit classifiers used to predict scores.\n\n\nIf field is left blank, all default classifiers in ../data/study_subreddits.csv will all be used\n\n\nIf field is passed a blank list [], no classifiers will be used, and no  agreement score will be found\n\n\n\n\n\n\nmacro_norm_list [OPTIONAL]:\n list of macro norms used to predict scores.\n        * If field is left blank, all default macro norms in ../data/macro-norms.txt will all be used\n        * If field is passed a blank list [], no macro norms will be used, and no norm violation score will be found\n\n\nkey\n: string used for authentication.\n        * currently, for debugging, key is set to \nABCDEFG\n\n\n\n\nSample API Requests\n\n\nExamples of API requests made through command line with cURL:\n\n\nRating comments with all classifiers and no macro norms\n\n\n    $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"macro_norm_list\": [], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores\n\n\n\n\nRating comments with only select classifiers and all macro norms\n\n\n    $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"subreddit_list\": [\"Futurology\", \"nba\", \"AskReddit\", \"science\", \"politics\", \"pokemongo\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores\n\n\n\n\nRating comments with all classifiers and all macro norms\n\n\n    $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores\n\n\n\n\nFor examples of making API calls through Python, see \napi_demo.py\n.\n\n\nResponses\n\n\n\n\nThe API response is an array of JSON objects, where the index of each JSON object  corresponds to the index of the original comment in the request.\n\n\n\n\n[\n        {\n            'agreement_score': AGREEMENT_SCORE,\n            'norm_violation_score': NORM_VIOLATION_SCORE,\n            'subreddits_that_remove': [ subreddit1, subreddit2, ... ],\n            'norms_violated': [ norm1, norm2, ... ]\n        },\n        ....\n    ]\n\n * \nagreement_score:\n prediction score from subreddit classifiers. If no classifiers were used, is a \nNULL\n value.\n  * \nnorm_violation_score:\n prediction score from macro norms. If no macro norms were used, is a \nNULL\n value.\n   * \nsubreddits_that_remove:\n list of classifiers that voted to removed the comment. If no classifiers were used, is an \nempty\n list.\n    * \nnorms_violated:\n list of norms that were violated by the comment. If no macro norms were used, is an \nempty\n list.\n\n\nLocal Instance Dependencies\n\n\nAgain, if you run a local instance of the API, a virtual environment is recommended.\n\n\n crossmodclassifiers.py\n flask\n pandas\n traceback\n json\n\n\n\n\nTo deploy with Gunicorn:\n\n\n wsgi.py\n gunicorn3\n\n\n\n\nTroubleshooting\n\n\nIf an API response contains:\n\n\n[Errno 12] Cannot allocate memory\n\n\n\n\nthe server is experiencing memory issues. Crossmod may be experiencing memory leaks.\n\n\nIf there is a port conflict when running a local instance:\n\ntry switching from port 6000 to an alternative port such as 8000.",
            "title": "Api"
        },
        {
            "location": "/api/#quick-start",
            "text": "### Running a local instance\n* Clone Crossmoderator repository\n    *  https://github.com/ceshwar/crossmod \n* Install dependencies  ./bin/crossmod_flask_run.sh",
            "title": "Quick Start"
        },
        {
            "location": "/api/#flask-outdated",
            "text": "$ export FLASK_APP=api.py\n$ flask run --host=0.0.0.0 -p 6000",
            "title": "Flask (Outdated)"
        },
        {
            "location": "/api/#gunicorn-outdated",
            "text": "$ gunicorn3 --bind 0.0.0.0:6000 wsgi",
            "title": "Gunicorn (Outdated)"
        },
        {
            "location": "/api/#api-request-format",
            "text": "An API request takes the following format:  http://crossmod.ml/api/v1/get-prediction-scores  The API call request is a JSON object with the following fields:  {\n    \"comments\": [ comment1, comment2, ... ],\n    \"subreddit_list\": [ classifier1, classifier2, ... ],\n    \"macro_norm_list\": [ norm1, norm2, ... ],\n    \"key\": KEY\n}   comments:  array of comment strings to be evaluated  subreddit_list [OPTIONAL]:  list of subreddit classifiers used to predict scores.  If field is left blank, all default classifiers in ../data/study_subreddits.csv will all be used  If field is passed a blank list [], no classifiers will be used, and no  agreement score will be found    macro_norm_list [OPTIONAL]:  list of macro norms used to predict scores.\n        * If field is left blank, all default macro norms in ../data/macro-norms.txt will all be used\n        * If field is passed a blank list [], no macro norms will be used, and no norm violation score will be found  key : string used for authentication.\n        * currently, for debugging, key is set to  ABCDEFG",
            "title": "API Request Format"
        },
        {
            "location": "/api/#sample-api-requests",
            "text": "Examples of API requests made through command line with cURL:  Rating comments with all classifiers and no macro norms      $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"macro_norm_list\": [], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores  Rating comments with only select classifiers and all macro norms      $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"subreddit_list\": [\"Futurology\", \"nba\", \"AskReddit\", \"science\", \"politics\", \"pokemongo\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores  Rating comments with all classifiers and all macro norms      $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores  For examples of making API calls through Python, see  api_demo.py .",
            "title": "Sample API Requests"
        },
        {
            "location": "/api/#responses",
            "text": "The API response is an array of JSON objects, where the index of each JSON object  corresponds to the index of the original comment in the request.   [\n        {\n            'agreement_score': AGREEMENT_SCORE,\n            'norm_violation_score': NORM_VIOLATION_SCORE,\n            'subreddits_that_remove': [ subreddit1, subreddit2, ... ],\n            'norms_violated': [ norm1, norm2, ... ]\n        },\n        ....\n    ] \n *  agreement_score:  prediction score from subreddit classifiers. If no classifiers were used, is a  NULL  value.\n  *  norm_violation_score:  prediction score from macro norms. If no macro norms were used, is a  NULL  value.\n   *  subreddits_that_remove:  list of classifiers that voted to removed the comment. If no classifiers were used, is an  empty  list.\n    *  norms_violated:  list of norms that were violated by the comment. If no macro norms were used, is an  empty  list.",
            "title": "Responses"
        },
        {
            "location": "/api/#local-instance-dependencies",
            "text": "Again, if you run a local instance of the API, a virtual environment is recommended.   crossmodclassifiers.py\n flask\n pandas\n traceback\n json  To deploy with Gunicorn:   wsgi.py\n gunicorn3",
            "title": "Local Instance Dependencies"
        },
        {
            "location": "/api/#troubleshooting",
            "text": "If an API response contains:  [Errno 12] Cannot allocate memory  the server is experiencing memory issues. Crossmod may be experiencing memory leaks.  If there is a port conflict when running a local instance: \ntry switching from port 6000 to an alternative port such as 8000.",
            "title": "Troubleshooting"
        },
        {
            "location": "/getting_started/",
            "text": "Installing Crossmod\n\n\nInstalling Dependencies\n\n\n\n\n\n\nCrossmod is written using Python 3 and has the following dependencies:\n\n\n\n\n\n\npandas\n (Python Data Analysis Library)\n\n\n\n\npraw\n (Python Reddit API Wrapper)\n\n\ngoogle-api-client\n (Python Google API Client)\n\n\nflask\n (Flask Web Framework)\n\n\nsqlalchemy\n (Object Relational Mapping interface for database)\n\n\nfasttext\n (Python wrapper for fasttext binaries)\n\n\nseaborn\n (Used for styling plots)\n\n\n\n\nclick\n (Used for parsing command line arguments)\n\n\n\n\n\n\nInstall these dependencies by running the following commands:\n  \npip3 install flask\n  pip3 install pandas\n  pip3 install praw\n  pip3 install google-api-python-client\n  pip3 install sqlalchemy\n  pip3 install fasttext\n  pip3 install seaborn\n  pip3 install click\n\nNote that using a Python virtual environment is highly recommended (but not necessary). A guide to set up a Python virtual environment can be found \nhere\n.\nIf using a python virtual environment, replace \npip3\n with \npip\n when installing Crossmod dependencies. \n\n\n\n\n\n\nGetting Credentials for Crossmod\n\n\n\n\nCrossmod currently uses Google\u2019s Perspective API for moderation tasks. \nA personal Perspective API Key can be obtained following \nthese instructions\n. After obtaining the API key, paste it into \ncrossmod_credentials.sh\n as described below.\n\n\nObtain Reddit API credentials by creating an app \nhere\n and paste the client ID and client secret along with the username and password for the Reddit account used for creating the app in \ncrossmod credentials.sh\n as described below.\n\n\n\n\nSet up keys\n\n\n\n\n\n\nCrossmod depends on a few credentials and constants, such as the key for Perspective API, Reddit credentials for \npraw\n, and the paths to the sqlite database file and the Crossmod fasttext classifiers.\n\n\n\n\n\n\nTo set up the keys file for Crossmod, first cp the crossmod_credentials_example.sh to a file called crossmod_credentials.sh\nAssuming the Crossmod repository was cloned to the home directory of the user\n\n\n\n\n\n\n    git clone https://github.com/ceshwar/crossmod\n    cd crossmod\n    cp crossmod_credentials_example.sh crossmod_credentials.sh\n\n\n\n\n\n\nOpen crossmod_credentials.sh and replace the keys with credentials obtained previously. The crossmod_credentials.sh file should also contain the path to the directory containing fasttext models that Crossmod requires for cross-community predictions.\n\n\nPERSPECTIVE_API_SECRET\n is the API key for Perspective API\n\n\nREDDIT_USER_AGENT\n is the User-Agent value for Crossmod, this can be set to any value that makes sense, for example, \"Testing Crossmod (by /u/CrossModerator)\"\n\n\n\n\nREDDIT_CLIENT_ID\n, \nREDDIT_CLIENT_SECRET\n are obtained by \ncreating an app\n on Reddit as described previously.  \n\n\n\n\n\n\nREDDIT_PASSWORD\n, \nREDDIT_USERNAME\n are the password and the username of the Reddit account that was used to obtain the API credentials\n\n\n\n\n\n\nMODELS_DIRECTORY\n is the path to fasttext classifiers required by Crossmod\n\n\n\n\n\n\nA complete \ncrossmod_credentials.sh\n file looks like this:\n\n\n\n\n\n\nexport PERSPECTIVE_API_SECRET=GFDKHJN43jkngrjkegbjkbgfdkj\nexport REDDIT_USER_AGENT=\"Testing Crossmod (by /u/CrossModerator)\"\nexport REDDIT_CLIENT_ID=s-GFKNGlngkfd\nexport REDDIT_CLIENT_SECRET=JBGFDJLGDFGJ\nexport REDDIT_PASSWORD=your_password_for_reddit\nexport REDDIT_USERNAME=YourUsernameForReddit\nexport MODELS_DIRECTORY=\"/models/directory\"\n\n\n\n\n\n\nEdit ~/.profile to load Crossmod credentials into the environment on login\n\n\n\n\n    echo \"source ~/crossmod/crossmod_credentials.sh\" >> ~/.profile\n    source ~/.profile\n\n\n\n\nStarting Crossmod\n\n\n\n\nCrossmod can be started by running the \ncrossmod.py\n script with the required arguments:\n\n\nThe name of the subreddit\n\n\nAn indicator to actually perform actions specified in config.py [0, 1]\n\n\nAn indicator to use Crossmod's backend classifers [0, 1]\n\n\n\n\n\n\n\n\n    cd ~/crossmod/code\n    # crossmod.py <subreddit-name> <perform-action [0, 1]> <use-classifiers [0, 1]>\n    python3 crossmod.py modbot_staging 1 1",
            "title": "Getting started"
        },
        {
            "location": "/getting_started/#installing-crossmod",
            "text": "",
            "title": "Installing Crossmod"
        },
        {
            "location": "/getting_started/#installing-dependencies",
            "text": "Crossmod is written using Python 3 and has the following dependencies:    pandas  (Python Data Analysis Library)   praw  (Python Reddit API Wrapper)  google-api-client  (Python Google API Client)  flask  (Flask Web Framework)  sqlalchemy  (Object Relational Mapping interface for database)  fasttext  (Python wrapper for fasttext binaries)  seaborn  (Used for styling plots)   click  (Used for parsing command line arguments)    Install these dependencies by running the following commands:\n   pip3 install flask\n  pip3 install pandas\n  pip3 install praw\n  pip3 install google-api-python-client\n  pip3 install sqlalchemy\n  pip3 install fasttext\n  pip3 install seaborn\n  pip3 install click \nNote that using a Python virtual environment is highly recommended (but not necessary). A guide to set up a Python virtual environment can be found  here .\nIf using a python virtual environment, replace  pip3  with  pip  when installing Crossmod dependencies.     Getting Credentials for Crossmod   Crossmod currently uses Google\u2019s Perspective API for moderation tasks. \nA personal Perspective API Key can be obtained following  these instructions . After obtaining the API key, paste it into  crossmod_credentials.sh  as described below.  Obtain Reddit API credentials by creating an app  here  and paste the client ID and client secret along with the username and password for the Reddit account used for creating the app in  crossmod credentials.sh  as described below.",
            "title": "Installing Dependencies"
        },
        {
            "location": "/getting_started/#set-up-keys",
            "text": "Crossmod depends on a few credentials and constants, such as the key for Perspective API, Reddit credentials for  praw , and the paths to the sqlite database file and the Crossmod fasttext classifiers.    To set up the keys file for Crossmod, first cp the crossmod_credentials_example.sh to a file called crossmod_credentials.sh\nAssuming the Crossmod repository was cloned to the home directory of the user        git clone https://github.com/ceshwar/crossmod\n    cd crossmod\n    cp crossmod_credentials_example.sh crossmod_credentials.sh   Open crossmod_credentials.sh and replace the keys with credentials obtained previously. The crossmod_credentials.sh file should also contain the path to the directory containing fasttext models that Crossmod requires for cross-community predictions.  PERSPECTIVE_API_SECRET  is the API key for Perspective API  REDDIT_USER_AGENT  is the User-Agent value for Crossmod, this can be set to any value that makes sense, for example, \"Testing Crossmod (by /u/CrossModerator)\"   REDDIT_CLIENT_ID ,  REDDIT_CLIENT_SECRET  are obtained by  creating an app  on Reddit as described previously.      REDDIT_PASSWORD ,  REDDIT_USERNAME  are the password and the username of the Reddit account that was used to obtain the API credentials    MODELS_DIRECTORY  is the path to fasttext classifiers required by Crossmod    A complete  crossmod_credentials.sh  file looks like this:    export PERSPECTIVE_API_SECRET=GFDKHJN43jkngrjkegbjkbgfdkj\nexport REDDIT_USER_AGENT=\"Testing Crossmod (by /u/CrossModerator)\"\nexport REDDIT_CLIENT_ID=s-GFKNGlngkfd\nexport REDDIT_CLIENT_SECRET=JBGFDJLGDFGJ\nexport REDDIT_PASSWORD=your_password_for_reddit\nexport REDDIT_USERNAME=YourUsernameForReddit\nexport MODELS_DIRECTORY=\"/models/directory\"   Edit ~/.profile to load Crossmod credentials into the environment on login       echo \"source ~/crossmod/crossmod_credentials.sh\" >> ~/.profile\n    source ~/.profile",
            "title": "Set up keys"
        },
        {
            "location": "/getting_started/#starting-crossmod",
            "text": "Crossmod can be started by running the  crossmod.py  script with the required arguments:  The name of the subreddit  An indicator to actually perform actions specified in config.py [0, 1]  An indicator to use Crossmod's backend classifers [0, 1]         cd ~/crossmod/code\n    # crossmod.py <subreddit-name> <perform-action [0, 1]> <use-classifiers [0, 1]>\n    python3 crossmod.py modbot_staging 1 1",
            "title": "Starting Crossmod"
        }
    ]
}