{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Code base for Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators ACM Reference Format: Eshwar Chandrasekharan, Chaitrali Gandhi, Matthew Wortley Mustelier, and Eric Gilbert. 2019. Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators. Proc. ACM Hum.-Comput. Interact., CSCW. Code directory: code/ - contains the codebase for the system: * config.py : configuration file that allows mods to control the system using IFTTT rules * getPrediction.py : modules to query back-end models in order to score incoming comments * crossmod.py : system code that creates a bot moderator for the test subreddit, taking moderations actions based on the configuration file. data/ - contains the list of subreddits and norm violations that comprise the system's AI back-end. Contact authors to obtain the ensemble of classifiers for Crossmod's back-end. Installation instructions: Crossmod depends on flask, SQLAlchemy, pandas, praw (python reddit api wrapper) and the google api python client (Preferably use a virtual environment) pip3 install flask pip3 install sqlalchemy pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install fasttext","title":"Home"},{"location":"#code-base-for-crossmod-a-cross-community-learning-based-system-to-assist-reddit-moderators","text":"","title":"Code base for Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators"},{"location":"#acm-reference-format","text":"Eshwar Chandrasekharan, Chaitrali Gandhi, Matthew Wortley Mustelier, and Eric Gilbert. 2019. Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators. Proc. ACM Hum.-Comput. Interact., CSCW.","title":"ACM Reference Format:"},{"location":"#code-directory","text":"code/ - contains the codebase for the system: * config.py : configuration file that allows mods to control the system using IFTTT rules * getPrediction.py : modules to query back-end models in order to score incoming comments * crossmod.py : system code that creates a bot moderator for the test subreddit, taking moderations actions based on the configuration file. data/ - contains the list of subreddits and norm violations that comprise the system's AI back-end. Contact authors to obtain the ensemble of classifiers for Crossmod's back-end.","title":"Code directory:"},{"location":"#installation-instructions","text":"Crossmod depends on flask, SQLAlchemy, pandas, praw (python reddit api wrapper) and the google api python client (Preferably use a virtual environment) pip3 install flask pip3 install sqlalchemy pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install fasttext","title":"Installation instructions:"},{"location":"api/","text":"Quick Start install DEPENDENCIES Navigate to crossmod_api/code export FLASK_APP=api.py flask run Requests The JSON request is an object with the following fields: { \"comments\": [ comment1, comment2, ... ], \"subreddit_list\": [ classifier1, classifier2, ... ], \"macro_norm_list\": [ norm1, norm2, ... ], \"key\": KEY } comments: array of comment strings to be evaulated by Crossmod subreddit_list: (OPTIONAL) list of subreddit classifiers used to predict scores. If field is left blank, the default classifiers in ../data/study_subreddits.csv will all be used If field is passed a blank list [], no classifiers will be used, and no agreement score will be found macro_norm_list: (OPTIONAL) list of macro norms used to predict scores. * If field is left blank, the default macro norms in ../data/macro-norms.txt will all be used * If field is passed a blank list [], no macro norms will be used, and no norm violation score will be found key : string used for authentication. * currently, for debugging, key is set to ABCDEFG Example Requests While flask is running: rating comments with all classifiers and no macro norms ~~~ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"macro_norm_list\": [], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://localhost:5000/get-prediction-scores ~~~ rating comments with only select classifiers and all macro norms ~~~ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"subreddit_list\": [\"Futurology\", \"nba\", \"AskReddit\", \"science\", \"politics\", \"pokemongo\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://localhost:5000/get-prediction-scores ~~~ rating comments with all classifiers and all macro norms ~~~ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://localhost:5000/get-prediction-scores ~~~ Responses The JSON response is an array of JSON objects, where the index of each JSON object corresponds to the index of the original comment in the request. ~~~ [ { 'agreement_score': AGREEMENT_SCORE, 'norm_violation_score': NORM_VIOLATION_SCORE, 'subreddits_that_remove': [ subreddit1, subreddit2, ... ], 'norms_violated': [ norm1, norm2, ... ] }, .... ] ~~~ * `agreement_score: ` prediction score from subreddit classifiers. * if no classifiers were used, is a `NULL` value. * `norm_violation_score: ` prediction score from macro norms. * if no macro norms were used, is a `NULL` value. * `subreddits_that_remove: ` list of classifiers that would have removed the comment. * if no classifiers were used, is an empty list * `norms_violated: ` list of norms that were violated by the comment. * if no macro norms were used, is an empty listed * CHECK IF agreement_score OR norm_violation_score IS NULL NOT IF subreddits_that_remove OR norms_violated IS EMPTY because a NULL value implies that classifiers and/or macro norms were not used whereas an EMPTY list does NOT NECESSARILY imply the above Dependencies getPredictions.py flask pandas traceback json Common Troubleshooting Make sure getPredictions.py points to the correct paths for the norm/reddit models and the fastText directory Make sure fastText binaries are compiled on local machine. If not, navigate to /fastText-0.9.1 and make clean && make","title":"API"},{"location":"api/#quick-start","text":"install DEPENDENCIES Navigate to crossmod_api/code export FLASK_APP=api.py flask run","title":"Quick Start"},{"location":"api/#requests","text":"The JSON request is an object with the following fields: { \"comments\": [ comment1, comment2, ... ], \"subreddit_list\": [ classifier1, classifier2, ... ], \"macro_norm_list\": [ norm1, norm2, ... ], \"key\": KEY } comments: array of comment strings to be evaulated by Crossmod subreddit_list: (OPTIONAL) list of subreddit classifiers used to predict scores. If field is left blank, the default classifiers in ../data/study_subreddits.csv will all be used If field is passed a blank list [], no classifiers will be used, and no agreement score will be found macro_norm_list: (OPTIONAL) list of macro norms used to predict scores. * If field is left blank, the default macro norms in ../data/macro-norms.txt will all be used * If field is passed a blank list [], no macro norms will be used, and no norm violation score will be found key : string used for authentication. * currently, for debugging, key is set to ABCDEFG","title":"Requests"},{"location":"api/#example-requests","text":"While flask is running: rating comments with all classifiers and no macro norms ~~~ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"macro_norm_list\": [], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://localhost:5000/get-prediction-scores ~~~ rating comments with only select classifiers and all macro norms ~~~ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"subreddit_list\": [\"Futurology\", \"nba\", \"AskReddit\", \"science\", \"politics\", \"pokemongo\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://localhost:5000/get-prediction-scores ~~~ rating comments with all classifiers and all macro norms ~~~ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://localhost:5000/get-prediction-scores ~~~","title":"Example Requests"},{"location":"api/#responses","text":"The JSON response is an array of JSON objects, where the index of each JSON object corresponds to the index of the original comment in the request. ~~~ [ { 'agreement_score': AGREEMENT_SCORE, 'norm_violation_score': NORM_VIOLATION_SCORE, 'subreddits_that_remove': [ subreddit1, subreddit2, ... ], 'norms_violated': [ norm1, norm2, ... ] }, .... ] ~~~ * `agreement_score: ` prediction score from subreddit classifiers. * if no classifiers were used, is a `NULL` value. * `norm_violation_score: ` prediction score from macro norms. * if no macro norms were used, is a `NULL` value. * `subreddits_that_remove: ` list of classifiers that would have removed the comment. * if no classifiers were used, is an empty list * `norms_violated: ` list of norms that were violated by the comment. * if no macro norms were used, is an empty listed * CHECK IF agreement_score OR norm_violation_score IS NULL NOT IF subreddits_that_remove OR norms_violated IS EMPTY because a NULL value implies that classifiers and/or macro norms were not used whereas an EMPTY list does NOT NECESSARILY imply the above Dependencies getPredictions.py flask pandas traceback json Common Troubleshooting Make sure getPredictions.py points to the correct paths for the norm/reddit models and the fastText directory Make sure fastText binaries are compiled on local machine. If not, navigate to /fastText-0.9.1 and make clean && make","title":"Responses"},{"location":"getting_started/","text":"Installing Crossmod Installing Dependencies Crossmod is written using Python 3 and has the following dependencies: pandas (Python Data Analysis Library) praw (Python Reddit API Wrapper) google-api-client (Python Google API Client) flask (Flask Web Framework) sqlalchemy (Object Relational Mapping interface for database) fasttext (Python wrapper for fasttext binaries) seaborn (Used for styling plots) Install these dependencies by running the following commands: pip3 install flask pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install sqlalchemy pip3 install fasttext pip3 install seaborn Note that using a Python virtual environment is highly recommended (but not necessary). A guide to set up a Python virtual environment can be found here . If using a python virtual environment, replace pip3 with pip when installing Crossmod dependencies. Getting Credentials for Crossmod Crossmod currently uses Google\u2019s Perspective API for moderation tasks. A personal Perspective API Key can be obtained following these instructions . After obtaining the API key, paste it into keys/perspective-api-key.txt Obtain Reddit API credentials by creating an app here and paste the client ID and client secret along with the username and password for the Reddit account used for creating the app as comma separated values on the second line of keys/crossmod-creds.txt (no spaces necessary between each comma separated value. Set up keys Crossmod depends on a few credentials and constants, such as the key for Perspective API, Reddit credentials for praw , and the paths to the sqlite database file and the Crossmod fasttext classifiers. To set up the keys file for Crossmod, first cp the crossmod_credentials_example.sh to a file called crossmod_credentials.sh Assuming the Crossmod repository was cloned to the home directory of the user git clone https://github.com/ceshwar/crossmod cd crossmod cp crossmod_credentials_example.sh crossmod_credentials.sh Open crossmod_credentials.sh and replace the keys with credentials obtained previously. The crossmod_credentials.sh file should also contain the path to the directory containing fasttext models that Crossmod requires for cross-community predictions. Edit ~/.profile to load Crossmod credentials into the environment on login echo \"source ~/crossmod/crossmod_credentials.sh\" >> ~/.profile source ~/.profile Starting Crossmod Crossmod can be started by running the crossmod.py script with the required arguments: The name of the subreddit An indicator to actually perform actions spepcified in config.py [0, 1] An indicator to use Crossmod's backend classifers [0, 1] cd ~/crossmod/code # crossmod.py <subreddit-name> <perform-action [0, 1]> <use-classifiers [0, 1]> python3 crossmod.py modbot_staging 1 1","title":"Getting Started"},{"location":"getting_started/#installing-crossmod","text":"","title":"Installing Crossmod"},{"location":"getting_started/#installing-dependencies","text":"Crossmod is written using Python 3 and has the following dependencies: pandas (Python Data Analysis Library) praw (Python Reddit API Wrapper) google-api-client (Python Google API Client) flask (Flask Web Framework) sqlalchemy (Object Relational Mapping interface for database) fasttext (Python wrapper for fasttext binaries) seaborn (Used for styling plots) Install these dependencies by running the following commands: pip3 install flask pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install sqlalchemy pip3 install fasttext pip3 install seaborn Note that using a Python virtual environment is highly recommended (but not necessary). A guide to set up a Python virtual environment can be found here . If using a python virtual environment, replace pip3 with pip when installing Crossmod dependencies. Getting Credentials for Crossmod Crossmod currently uses Google\u2019s Perspective API for moderation tasks. A personal Perspective API Key can be obtained following these instructions . After obtaining the API key, paste it into keys/perspective-api-key.txt Obtain Reddit API credentials by creating an app here and paste the client ID and client secret along with the username and password for the Reddit account used for creating the app as comma separated values on the second line of keys/crossmod-creds.txt (no spaces necessary between each comma separated value.","title":"Installing Dependencies"},{"location":"getting_started/#set-up-keys","text":"Crossmod depends on a few credentials and constants, such as the key for Perspective API, Reddit credentials for praw , and the paths to the sqlite database file and the Crossmod fasttext classifiers. To set up the keys file for Crossmod, first cp the crossmod_credentials_example.sh to a file called crossmod_credentials.sh Assuming the Crossmod repository was cloned to the home directory of the user git clone https://github.com/ceshwar/crossmod cd crossmod cp crossmod_credentials_example.sh crossmod_credentials.sh Open crossmod_credentials.sh and replace the keys with credentials obtained previously. The crossmod_credentials.sh file should also contain the path to the directory containing fasttext models that Crossmod requires for cross-community predictions. Edit ~/.profile to load Crossmod credentials into the environment on login echo \"source ~/crossmod/crossmod_credentials.sh\" >> ~/.profile source ~/.profile","title":"Set up keys"},{"location":"getting_started/#starting-crossmod","text":"Crossmod can be started by running the crossmod.py script with the required arguments: The name of the subreddit An indicator to actually perform actions spepcified in config.py [0, 1] An indicator to use Crossmod's backend classifers [0, 1] cd ~/crossmod/code # crossmod.py <subreddit-name> <perform-action [0, 1]> <use-classifiers [0, 1]> python3 crossmod.py modbot_staging 1 1","title":"Starting Crossmod"}]}