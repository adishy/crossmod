{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Code base for Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators ACM Reference Format: Eshwar Chandrasekharan, Chaitrali Gandhi, Matthew Wortley Mustelier, and Eric Gilbert. 2019. Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators. Proc. ACM Hum.-Comput. Interact., CSCW. Code directory: code/ - contains the codebase for the system: * config.py : configuration file that allows mods to control the system using IFTTT rules * getPrediction.py : modules to query back-end models in order to score incoming comments * crossmod.py : system code that creates a bot moderator for the test subreddit, taking moderations actions based on the configuration file. data/ - contains the list of subreddits and norm violations that comprise the system's AI back-end. Contact authors to obtain the ensemble of classifiers for Crossmod's back-end. Installation instructions: Crossmod depends on flask, SQLAlchemy, pandas, praw (python reddit api wrapper) and the google api python client (Preferably use a virtual environment) pip3 install flask pip3 install sqlalchemy pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install fasttext pip3 install tenacity","title":"Home"},{"location":"#code-base-for-crossmod-a-cross-community-learning-based-system-to-assist-reddit-moderators","text":"","title":"Code base for Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators"},{"location":"#acm-reference-format","text":"Eshwar Chandrasekharan, Chaitrali Gandhi, Matthew Wortley Mustelier, and Eric Gilbert. 2019. Crossmod: A Cross-Community Learning-based System to Assist Reddit Moderators. Proc. ACM Hum.-Comput. Interact., CSCW.","title":"ACM Reference Format:"},{"location":"#code-directory","text":"code/ - contains the codebase for the system: * config.py : configuration file that allows mods to control the system using IFTTT rules * getPrediction.py : modules to query back-end models in order to score incoming comments * crossmod.py : system code that creates a bot moderator for the test subreddit, taking moderations actions based on the configuration file. data/ - contains the list of subreddits and norm violations that comprise the system's AI back-end. Contact authors to obtain the ensemble of classifiers for Crossmod's back-end.","title":"Code directory:"},{"location":"#installation-instructions","text":"Crossmod depends on flask, SQLAlchemy, pandas, praw (python reddit api wrapper) and the google api python client (Preferably use a virtual environment) pip3 install flask pip3 install sqlalchemy pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install fasttext pip3 install tenacity","title":"Installation instructions:"},{"location":"getting_started/","text":"Installing Crossmod Installing Dependencies Crossmod is written using Python 3 and has the following dependencies: pandas (Python Data Analysis Library) praw (Python Reddit API Wrapper) google-api-client (Python Google API Client) flask (Flask Web Framework) sqlalchemy (Object Relational Mapping interface for database) fasttext (Python wrapper for fasttext binaries) seaborn (Used for styling plots) click (Used for parsing command line arguments) Install these dependencies by running the following commands: pip3 install flask pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install sqlalchemy pip3 install fasttext pip3 install seaborn pip3 install click Note that using a Python virtual environment is highly recommended (but not necessary). A guide to set up a Python virtual environment can be found here . If using a python virtual environment, replace pip3 with pip when installing Crossmod dependencies. Getting Credentials for Crossmod Crossmod currently uses Google\u2019s Perspective API for moderation tasks. A personal Perspective API Key can be obtained following these instructions . After obtaining the API key, paste it into crossmod_credentials.sh as described below. Obtain Reddit API credentials by creating an app here and paste the client ID and client secret along with the username and password for the Reddit account used for creating the app in crossmod credentials.sh as described below. Set up keys Crossmod depends on a few credentials and constants, such as the key for Perspective API, Reddit credentials for praw , and the paths to the sqlite database file and the Crossmod fasttext classifiers. To set up the keys file for Crossmod, first cp the crossmod_credentials_example.sh to a file called crossmod_credentials.sh Assuming the Crossmod repository was cloned to the home directory of the user git clone https://github.com/ceshwar/crossmod cd crossmod cp crossmod_credentials_example.sh crossmod_credentials.sh Open crossmod_credentials.sh and replace the keys with credentials obtained previously. The crossmod_credentials.sh file should also contain the path to the directory containing fasttext models that Crossmod requires for cross-community predictions. PERSPECTIVE_API_SECRET is the API key for Perspective API REDDIT_USER_AGENT is the User-Agent value for Crossmod, this can be set to any value that makes sense, for example, \"Testing Crossmod (by /u/CrossModerator)\" REDDIT_CLIENT_ID , REDDIT_CLIENT_SECRET are obtained by creating an app on Reddit as described previously. REDDIT_PASSWORD , REDDIT_USERNAME are the password and the username of the Reddit account that was used to obtain the API credentials MODELS_DIRECTORY is the path to fasttext classifiers required by Crossmod A complete crossmod_credentials.sh file looks like this: export PERSPECTIVE_API_SECRET=GFDKHJN43jkngrjkegbjkbgfdkj export REDDIT_USER_AGENT=\"Testing Crossmod (by /u/CrossModerator)\" export REDDIT_CLIENT_ID=s-GFKNGlngkfd export REDDIT_CLIENT_SECRET=JBGFDJLGDFGJ export REDDIT_PASSWORD=your_password_for_reddit export REDDIT_USERNAME=YourUsernameForReddit export MODELS_DIRECTORY=\"/models/directory\" Edit ~/.profile to load Crossmod credentials into the environment on login echo \"source ~/crossmod/crossmod_credentials.sh\" >> ~/.profile source ~/.profile Starting Crossmod Crossmod can be started by running the crossmod.py script with the required arguments: The name of the subreddit An indicator to actually perform actions specified in config.py [0, 1] An indicator to use Crossmod's backend classifers [0, 1] cd ~/crossmod/code # crossmod.py <subreddit-name> <perform-action [0, 1]> <use-classifiers [0, 1]> python3 crossmod.py modbot_staging 1 1","title":"Getting Started"},{"location":"getting_started/#installing-crossmod","text":"","title":"Installing Crossmod"},{"location":"getting_started/#installing-dependencies","text":"Crossmod is written using Python 3 and has the following dependencies: pandas (Python Data Analysis Library) praw (Python Reddit API Wrapper) google-api-client (Python Google API Client) flask (Flask Web Framework) sqlalchemy (Object Relational Mapping interface for database) fasttext (Python wrapper for fasttext binaries) seaborn (Used for styling plots) click (Used for parsing command line arguments) Install these dependencies by running the following commands: pip3 install flask pip3 install pandas pip3 install praw pip3 install google-api-python-client pip3 install sqlalchemy pip3 install fasttext pip3 install seaborn pip3 install click Note that using a Python virtual environment is highly recommended (but not necessary). A guide to set up a Python virtual environment can be found here . If using a python virtual environment, replace pip3 with pip when installing Crossmod dependencies. Getting Credentials for Crossmod Crossmod currently uses Google\u2019s Perspective API for moderation tasks. A personal Perspective API Key can be obtained following these instructions . After obtaining the API key, paste it into crossmod_credentials.sh as described below. Obtain Reddit API credentials by creating an app here and paste the client ID and client secret along with the username and password for the Reddit account used for creating the app in crossmod credentials.sh as described below.","title":"Installing Dependencies"},{"location":"getting_started/#set-up-keys","text":"Crossmod depends on a few credentials and constants, such as the key for Perspective API, Reddit credentials for praw , and the paths to the sqlite database file and the Crossmod fasttext classifiers. To set up the keys file for Crossmod, first cp the crossmod_credentials_example.sh to a file called crossmod_credentials.sh Assuming the Crossmod repository was cloned to the home directory of the user git clone https://github.com/ceshwar/crossmod cd crossmod cp crossmod_credentials_example.sh crossmod_credentials.sh Open crossmod_credentials.sh and replace the keys with credentials obtained previously. The crossmod_credentials.sh file should also contain the path to the directory containing fasttext models that Crossmod requires for cross-community predictions. PERSPECTIVE_API_SECRET is the API key for Perspective API REDDIT_USER_AGENT is the User-Agent value for Crossmod, this can be set to any value that makes sense, for example, \"Testing Crossmod (by /u/CrossModerator)\" REDDIT_CLIENT_ID , REDDIT_CLIENT_SECRET are obtained by creating an app on Reddit as described previously. REDDIT_PASSWORD , REDDIT_USERNAME are the password and the username of the Reddit account that was used to obtain the API credentials MODELS_DIRECTORY is the path to fasttext classifiers required by Crossmod A complete crossmod_credentials.sh file looks like this: export PERSPECTIVE_API_SECRET=GFDKHJN43jkngrjkegbjkbgfdkj export REDDIT_USER_AGENT=\"Testing Crossmod (by /u/CrossModerator)\" export REDDIT_CLIENT_ID=s-GFKNGlngkfd export REDDIT_CLIENT_SECRET=JBGFDJLGDFGJ export REDDIT_PASSWORD=your_password_for_reddit export REDDIT_USERNAME=YourUsernameForReddit export MODELS_DIRECTORY=\"/models/directory\" Edit ~/.profile to load Crossmod credentials into the environment on login echo \"source ~/crossmod/crossmod_credentials.sh\" >> ~/.profile source ~/.profile","title":"Set up keys"},{"location":"getting_started/#starting-crossmod","text":"Crossmod can be started by running the crossmod.py script with the required arguments: The name of the subreddit An indicator to actually perform actions specified in config.py [0, 1] An indicator to use Crossmod's backend classifers [0, 1] cd ~/crossmod/code # crossmod.py <subreddit-name> <perform-action [0, 1]> <use-classifiers [0, 1]> python3 crossmod.py modbot_staging 1 1","title":"Starting Crossmod"},{"location":"models/","text":"Models","title":"Models"},{"location":"models/#models","text":"","title":"Models"},{"location":"crossmod/analysis/","text":"Data Analysis","title":"Data Analysis"},{"location":"crossmod/analysis/#data-analysis","text":"","title":"Data Analysis"},{"location":"crossmod/api/","text":"Quick Start ### Running a local instance * Clone Crossmoderator repository * https://github.com/ceshwar/crossmod * Install dependencies ./bin/crossmod_flask_run.sh Flask (Outdated) $ export FLASK_APP=api.py $ flask run --host=0.0.0.0 -p 6000 Gunicorn (Outdated) $ gunicorn3 --bind 0.0.0.0:6000 wsgi API Request Format An API request takes the following format: http://crossmod.ml/api/v1/get-prediction-scores The API call request is a JSON object with the following fields: { \"comments\": [ comment1, comment2, ... ], \"subreddit_list\": [ classifier1, classifier2, ... ], \"macro_norm_list\": [ norm1, norm2, ... ], \"key\": KEY } comments: array of comment strings to be evaluated subreddit_list [OPTIONAL]: list of subreddit classifiers used to predict scores. If field is left blank, all default classifiers in ../data/study_subreddits.csv will all be used If field is passed a blank list [], no classifiers will be used, and no agreement score will be found macro_norm_list [OPTIONAL]: list of macro norms used to predict scores. * If field is left blank, all default macro norms in ../data/macro-norms.txt will all be used * If field is passed a blank list [], no macro norms will be used, and no norm violation score will be found key : string used for authentication. * currently, for debugging, key is set to ABCDEFG Sample API Requests Examples of API requests made through command line with cURL: Rating comments with all classifiers and no macro norms $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"macro_norm_list\": [], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores Rating comments with only select classifiers and all macro norms $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"subreddit_list\": [\"Futurology\", \"nba\", \"AskReddit\", \"science\", \"politics\", \"pokemongo\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores Rating comments with all classifiers and all macro norms $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores For examples of making API calls through Python, see api_demo.py . Responses The API response is an array of JSON objects, where the index of each JSON object corresponds to the index of the original comment in the request. [ { 'agreement_score': AGREEMENT_SCORE, 'norm_violation_score': NORM_VIOLATION_SCORE, 'subreddits_that_remove': [ subreddit1, subreddit2, ... ], 'norms_violated': [ norm1, norm2, ... ] }, .... ] * agreement_score: prediction score from subreddit classifiers. If no classifiers were used, is a NULL value. * norm_violation_score: prediction score from macro norms. If no macro norms were used, is a NULL value. * subreddits_that_remove: list of classifiers that voted to removed the comment. If no classifiers were used, is an empty list. * norms_violated: list of norms that were violated by the comment. If no macro norms were used, is an empty list. Local Instance Dependencies Again, if you run a local instance of the API, a virtual environment is recommended. crossmodclassifiers.py flask pandas traceback json To deploy with Gunicorn: wsgi.py gunicorn3 Troubleshooting If an API response contains: [Errno 12] Cannot allocate memory the server is experiencing memory issues. Crossmod may be experiencing memory leaks. If there is a port conflict when running a local instance: try switching from port 6000 to an alternative port such as 8000.","title":"API"},{"location":"crossmod/api/#quick-start","text":"### Running a local instance * Clone Crossmoderator repository * https://github.com/ceshwar/crossmod * Install dependencies ./bin/crossmod_flask_run.sh","title":"Quick Start"},{"location":"crossmod/api/#flask-outdated","text":"$ export FLASK_APP=api.py $ flask run --host=0.0.0.0 -p 6000","title":"Flask (Outdated)"},{"location":"crossmod/api/#gunicorn-outdated","text":"$ gunicorn3 --bind 0.0.0.0:6000 wsgi","title":"Gunicorn (Outdated)"},{"location":"crossmod/api/#api-request-format","text":"An API request takes the following format: http://crossmod.ml/api/v1/get-prediction-scores The API call request is a JSON object with the following fields: { \"comments\": [ comment1, comment2, ... ], \"subreddit_list\": [ classifier1, classifier2, ... ], \"macro_norm_list\": [ norm1, norm2, ... ], \"key\": KEY } comments: array of comment strings to be evaluated subreddit_list [OPTIONAL]: list of subreddit classifiers used to predict scores. If field is left blank, all default classifiers in ../data/study_subreddits.csv will all be used If field is passed a blank list [], no classifiers will be used, and no agreement score will be found macro_norm_list [OPTIONAL]: list of macro norms used to predict scores. * If field is left blank, all default macro norms in ../data/macro-norms.txt will all be used * If field is passed a blank list [], no macro norms will be used, and no norm violation score will be found key : string used for authentication. * currently, for debugging, key is set to ABCDEFG","title":"API Request Format"},{"location":"crossmod/api/#sample-api-requests","text":"Examples of API requests made through command line with cURL: Rating comments with all classifiers and no macro norms $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"macro_norm_list\": [], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores Rating comments with only select classifiers and all macro norms $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"subreddit_list\": [\"Futurology\", \"nba\", \"AskReddit\", \"science\", \"politics\", \"pokemongo\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores Rating comments with all classifiers and all macro norms $ curl -d '{\"comments\": [\"you really suck!\", \"this is just a comment\"], \"key\": \"ABCDEFG\"}' -H \"Content-Type: application/json\" -X POST http://crossmod.ml/api/v1/get-prediction-scores For examples of making API calls through Python, see api_demo.py .","title":"Sample API Requests"},{"location":"crossmod/api/#responses","text":"The API response is an array of JSON objects, where the index of each JSON object corresponds to the index of the original comment in the request. [ { 'agreement_score': AGREEMENT_SCORE, 'norm_violation_score': NORM_VIOLATION_SCORE, 'subreddits_that_remove': [ subreddit1, subreddit2, ... ], 'norms_violated': [ norm1, norm2, ... ] }, .... ] * agreement_score: prediction score from subreddit classifiers. If no classifiers were used, is a NULL value. * norm_violation_score: prediction score from macro norms. If no macro norms were used, is a NULL value. * subreddits_that_remove: list of classifiers that voted to removed the comment. If no classifiers were used, is an empty list. * norms_violated: list of norms that were violated by the comment. If no macro norms were used, is an empty list.","title":"Responses"},{"location":"crossmod/api/#local-instance-dependencies","text":"Again, if you run a local instance of the API, a virtual environment is recommended. crossmodclassifiers.py flask pandas traceback json To deploy with Gunicorn: wsgi.py gunicorn3","title":"Local Instance Dependencies"},{"location":"crossmod/api/#troubleshooting","text":"If an API response contains: [Errno 12] Cannot allocate memory the server is experiencing memory issues. Crossmod may be experiencing memory leaks. If there is a port conflict when running a local instance: try switching from port 6000 to an alternative port such as 8000.","title":"Troubleshooting"},{"location":"crossmod/db/","text":"Database","title":"Database"},{"location":"crossmod/db/#database","text":"","title":"Database"},{"location":"crossmod/helpers/","text":"Helpers","title":"Helpers"},{"location":"crossmod/helpers/#helpers","text":"","title":"Helpers"},{"location":"crossmod/ml/","text":"Machine Learing Models","title":"ML"},{"location":"crossmod/ml/#machine-learing-models","text":"","title":"Machine Learing Models"}]}